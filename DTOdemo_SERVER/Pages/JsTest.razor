@page "/js"
@using DTOdemo_SERVER.Helpers
@inject IJSRuntime _jsRuntime 

<div class="row">
    <button class="btn btn-primary" @onclick="TestConfirmBox">Test Confirm</button>
</div>
<div class="row my-4">
    <button class="btn btn-secondary" style="width: 200px;" @onclick="ToastrSuccess">Toastr Success</button>
    <button class="btn btn-danger" style="width: 200px;" @onclick="ToastrFailure">Toastr Failure</button>
</div>
<div class="row my-4">
    <button class="btn btn-secondary" style="width: 200px;" @onclick="SweetAlertSuccess">SweetAlert Success</button>
    <button class="btn btn-danger" style="width: 200px;" @onclick="SweetAlertFailure">SweetAlert Failure</button>
</div>

@if (ConfirmResult)
{
    <h1>Button Clicked!</h1>
}



@code {
    private string ConfirmMessage = "Are you sure you want to click?";
    private bool ConfirmResult { get; set; }

    private async Task TestConfirmBox()
    {
        ConfirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", ConfirmMessage);
    }

    private async Task ToastrSuccess()
    {
        // *** this has been moved to IJSRuntimeExtension.cs
        // since nothing is returned, used InvokeVoidAsync()
        //await _JsRuntime.InvokeVoidAsync("ShowToastr", "success", "Success!");

        await _jsRuntime.ToastrSuccess("Success!"); 
    }

    private async Task ToastrFailure()
    {
        await _jsRuntime.ToastrError("Error!");
    }


    private async Task SweetAlertSuccess()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "success", "Success!");
    }

    private async Task SweetAlertFailure()
    {
        await _jsRuntime.InvokeVoidAsync("ShowSwal", "error", "Error!");
    }
}
